import { motion } from 'framer-motion';
import { useState } from 'react';

interface Event {
  id: number;
  title: string;
  date  // Handle filter change with animation management
  date: string;
  description: string;
  image: string;
  category: 'upcoming' | 'past';
  tags: string[];
}

const Events = () => {
  const [activeFilter, setActiveFilter] = useState<'all' | 'upcoming' | 'past'>('all');
  const [activeEvent, setActiveEvent] = useState<Event | null>(null);
  
  // Sample events data
  const events: Event[] = [
    {
      id: 1,
      title: "AeroTech Summit 2025",
      date: "June 15, 2025",
      location: "BMSCE Main Auditorium",
      description: "Join us for a day of inspiring talks, workshops, and demonstrations focused on the latest trends in aerospace technology. Industry experts will share insights on electric propulsion, sustainable aviation, and space exploration.",
      image: "https://images.unsplash.com/photo-1517976487492-5750f3195933?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      category: 'upcoming',
      tags: ['Conference', 'Workshop']
    },
    {
      id: 2,
      title: "Drone Design Competition",
      date: "July 8-10, 2025",
      location: "BMSCE Innovation Lab",
      description: "Put your design skills to the test in this three-day competition. Teams will prototype, build, and test autonomous drones designed for urban delivery systems. Prizes for most innovative design, best performance, and sustainability.",
      image: "https://images.unsplash.com/photo-1506947411487-a56738267384?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      category: 'upcoming',
      tags: ['Competition', 'Design']
    },
    {
      id: 3,
      title: "Aerospace Industry Mixer",
      date: "May 5, 2025",
      location: "Virtual Event",
      description: "Network with professionals from leading aerospace companies. This virtual event will feature breakout rooms, Q&A sessions, and opportunities to learn about internships and job openings in the industry.",
      image: "https://images.unsplash.com/photo-1513193171507-66cf9535bce3?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      category: 'upcoming',
      tags: ['Networking', 'Industry']
    },
    {
      id: 4,
      title: "Rocket Propulsion Workshop",
      date: "March 12, 2025",
      location: "Engineering Block, Room 305",
      description: "Gained hands-on experience with different rocket propulsion systems. Participants built and tested small-scale solid fuel rockets and learned about the principles of thrust, efficiency, and safety in rocket design.",
      image: "https://images.unsplash.com/photo-1518364538800-6bae3c2ea0f2?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      category: 'past',
      tags: ['Workshop', 'Technical']
    },
    {
      id: 5,
      title: "Aviation Safety Seminar",
      date: "February 28, 2025",
      location: "Virtual Event",
      description: "This seminar covered critical aspects of aviation safety, featuring speakers from the aviation industry who discussed risk assessment, human factors in aviation accidents, and modern safety systems in aircraft design.",
      image: "https://images.unsplash.com/photo-1569154941061-e231b4725ef1?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      category: 'past',
      tags: ['Seminar', 'Safety']
    },
    {
      id: 6,
      title: "Wind Tunnel Testing Demo",
      date: "January 20, 2025",
      location: "Aerospace Lab",
      description: "Students observed and participated in wind tunnel testing of various airfoil designs. The event demonstrated principles of aerodynamics and provided practical insights into how engineers test and refine aircraft components.",
      image: "https://images.unsplash.com/photo-1464037801781-bdcd73b2c9d8?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      category: 'past',
      tags: ['Demo', 'Technical']
    }
  ];
  
  // Filter events based on activeFilter
  const filteredEvents = activeFilter === 'all' 
    ? events 
    : events.filter(event => event.category === activeFilter);
  
  // Animation variants with enhanced properties
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.08,
        when: "beforeChildren",
        duration: 0.3,
        ease: [0.2, 0.0, 0.2, 1.0]
      }
    },
    exit: {
      opacity: 0,
      transition: {
        duration: 0.2,
        ease: [0.4, 0.0, 1, 1]
      }
    }
  };
  
  const cardVariants = {
    hidden: { opacity: 0, y: 15, scale: 0.98 },
    visible: {
      opacity: 1,
      y: 0,
      scale: 1,
      transition: { 
        duration: 0.4,
        ease: [0.25, 0.1, 0.25, 1]
      }
    },
    exit: {
      opacity: 0,
      y: -10,
      scale: 0.98,
      transition: {
        duration: 0.2,
        ease: [0.4, 0.0, 1, 1]
      }
    }
  };
  
  // Handle filter change with animation management
  const handleFilterChange = (filter: 'all' | 'upcoming' | 'past') => {
    // Don't change if it's the same filter
    if (filter === activeFilter) return;
    
    // Set the new filter with a small delay to allow exit animations
    setActiveFilter(filter);
  }
  
  // Close event modal
  const closeEventModal = () => {
    setActiveEvent(null);
  };
  
  return (
    <div className="min-h-screen pt-24 pb-16 relative">
      <div className="absolute inset-0 grid-overlay opacity-10 pointer-events-none"></div>
      
      <div className="container mx-auto px-4">
        <div className="max-w-6xl mx-auto">
          {/* Section Title */}
          <motion.div 
            className="mb-12 text-center"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
          >
            <h2 className="text-3xl md:text-4xl font-orbitron font-bold mb-6 relative inline-block">
              <span><span className="text-deep-sky-blue">Events</span> Log</span>
              <motion.div 
                className="absolute -bottom-2 left-0 h-1 bg-deep-sky-blue"
                initial={{ width: 0 }}
                whileInView={{ width: '100%' }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.2 }}
              />
            </h2>
            <p className="text-titanium-gray text-lg">Connect, learn, and collaborate at our aerospace events</p>
          </motion.div>
          
          {/* Filter Tabs */}
          <motion.div 
            className="flex justify-center mb-8"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.4, ease: [0.25, 0.1, 0.25, 1] }}
          >
            <div className="glass-panel p-1.5 rounded-md flex relative">
              {['all', 'upcoming', 'past'].map((filter) => (
                <motion.button
                  key={`filter-${filter}`}
                  className={`px-4 py-2 rounded-md relative z-10 transition-all duration-300 ${
                    activeFilter === filter 
                      ? 'text-white font-medium' 
                      : 'text-titanium-gray hover:text-white'
                  }`}
                  onClick={() => handleFilterChange(filter as 'all' | 'upcoming' | 'past')}
                  whileTap={{ scale: 0.95 }}
                  transition={{ duration: 0.2 }}
                >
                  {filter.charAt(0).toUpperCase() + filter.slice(1)}
                </motion.button>
              ))}
              
              {/* Active background that slides */}
              <motion.div 
                className="absolute top-1.5 bottom-1.5 rounded-md bg-deep-sky-blue/20 z-0"
                initial={false}
                animate={{
                  left: activeFilter === 'all' ? '0.375rem' : 
                        activeFilter === 'upcoming' ? '33.33%' : '66.66%',
                  width: activeFilter === 'all' ? '4rem' : 
                         activeFilter === 'upcoming' ? '7rem' : '4rem'
                }}
                transition={{ 
                  type: 'spring', 
                  stiffness: 400, 
                  damping: 30,
                  mass: 1
                }}
              />
            </div>
          </motion.div>
          
          {/* Events Grid */}
          <motion.div 
            key={`events-${activeFilter}`} // More specific key for reliable re-rendering
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12 min-h-[200px]"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            layout
          >
            {filteredEvents.length > 0 ? (
              filteredEvents.map((event) => (
                <motion.div 
                  key={`event-${event.id}`}
                  className="glass-panel overflow-hidden rounded-lg cursor-pointer group relative"
                  variants={cardVariants}
                  whileHover={{ 
                    y: -5, 
                    boxShadow: '0 10px 25px rgba(0, 119, 182, 0.1)',
                    transition: { duration: 0.2, ease: [0.25, 0.1, 0.25, 1] }
                  }}
                  onClick={() => handleEventClick(event)}
                  layout
                >
                  {/* Event Image with optimized transition */}
                  <div className="h-48 overflow-hidden relative">
                    <div className="absolute inset-0 bg-gradient-to-t from-jet-black to-transparent z-10 opacity-60"></div>
                    <motion.img 
                      src={event.image} 
                      alt={event.title} 
                      className="w-full h-full object-cover"
                      initial={{ scale: 1 }}
                      whileHover={{ scale: 1.08 }}
                      transition={{ duration: 0.4, ease: [0.25, 0.1, 0.25, 1] }}
                    />
                    
                    {/* Category Badge */}
                    <div className={`absolute top-3 right-3 px-3 py-1 text-xs font-medium rounded-full z-20 ${
                      event.category === 'upcoming' 
                        ? 'bg-afterburner-orange/80 text-white' 
                        : 'bg-titanium-gray/80 text-white'
                    }`}>
                      {event.category === 'upcoming' ? 'Upcoming' : 'Past'}
                    </div>
                  
                  {/* Event Date & Location */}
                  <div className="absolute bottom-3 left-3 z-20 flex items-center">
                    <div className="bg-jet-black/70 backdrop-blur-sm px-3 py-1 rounded text-xs text-white flex items-center">
                      <svg className="w-3 h-3 mr-1 text-deep-sky-blue" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      {event.date}
                    </div>
                  </div>
                </div>
                
                {/* Event Details */}
                <div className="p-5">
                  <h3 className="font-orbitron text-lg mb-2 group-hover:text-deep-sky-blue transition-colors duration-300">
                    {event.title}
                  </h3>
                  <div className="flex items-center mb-3 text-titanium-gray text-xs">
                    <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    {event.location}
                  </div>
                  <p className="text-titanium-gray text-sm mb-4 line-clamp-2">
                    {event.description}
                  </p>
                  
                  {/* Tags */}
                  <div className="flex flex-wrap gap-2">
                    {event.tags.map((tag) => (
                      <span 
                        key={tag} 
                        className="text-xs px-2 py-1 bg-titanium-gray/10 text-titanium-gray rounded"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
                
                {/* View Details Indicator */}
                <div className="absolute bottom-4 right-4 w-8 h-8 rounded-full bg-deep-sky-blue/0 flex items-center justify-center transition-all duration-300 group-hover:bg-deep-sky-blue/20">
                  <svg className="w-4 h-4 text-deep-sky-blue transform transition-transform duration-300 group-hover:translate-x-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </div>
              </motion.div>
            ))
          ) : (
            <motion.div 
              className="col-span-full flex flex-col items-center justify-center py-12"
              variants={cardVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              layout
            >
              <svg className="w-16 h-16 text-titanium-gray/40 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <p className="text-titanium-gray text-lg mb-2">No events found for this filter</p>
              <p className="text-titanium-gray/70 text-sm mb-6 max-w-md text-center">
                {activeFilter === 'upcoming' 
                  ? 'There are no upcoming events scheduled at this time.' 
                  : 'There are no past events recorded in this category.'}
              </p>
              <button 
                className="px-6 py-2.5 text-deep-sky-blue border border-deep-sky-blue/30 rounded-md hover:bg-deep-sky-blue/10 transition-colors duration-300"
                onClick={() => handleFilterChange('all')}
              >
                View All Events
              </button>
            </motion.div>
          )}
          </motion.div>
          
          {/* Show More Button (if there are many events) */}
          {filteredEvents.length > 6 && (
            <motion.div 
              className="text-center"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              transition={{ 
                duration: 0.4, 
                delay: 0.2,
                ease: [0.25, 0.1, 0.25, 1]
              }}
              key={`more-${activeFilter}`}
              layout
            >
              <button className="button-secondary flex items-center mx-auto gap-2">
                <span>View More Events</span>
                <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>
            </motion.div>
          )}
        </div>
      </div>
      
      {/* Event Detail Modal */}
      {activeEvent && (
        <motion.div 
          className="fixed inset-0 z-50 flex items-center justify-center p-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          {/* Backdrop */}
          <div 
            className="absolute inset-0 bg-jet-black/80 backdrop-blur-sm"
            onClick={closeEventModal}
          ></div>
          
          {/* Modal Content */}
          <motion.div 
            className="glass-panel rounded-lg overflow-hidden w-full max-w-3xl relative z-10"
            initial={{ scale: 0.9, y: 20 }}
            animate={{ scale: 1, y: 0 }}
            transition={{ type: 'spring', stiffness: 300, damping: 25 }}
          >
            {/* Close Button */}
            <button 
              className="absolute top-4 right-4 z-20 w-8 h-8 rounded-full bg-jet-black/50 flex items-center justify-center text-white hover:bg-deep-sky-blue/20 transition-colors duration-300"
              onClick={closeEventModal}
            >
              <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            {/* Header Image */}
            <div className="h-64 overflow-hidden relative">
              <div className="absolute inset-0 bg-gradient-to-t from-jet-black to-transparent z-10 opacity-70"></div>
              <img 
                src={activeEvent.image} 
                alt={activeEvent.title} 
                className="w-full h-full object-cover"
              />
              
              {/* Category Badge */}
              <div className={`absolute top-4 left-4 px-3 py-1 text-xs font-medium rounded-full z-20 ${
                activeEvent.category === 'upcoming' 
                  ? 'bg-afterburner-orange/80 text-white' 
                  : 'bg-titanium-gray/80 text-white'
              }`}>
                {activeEvent.category === 'upcoming' ? 'Upcoming' : 'Past'}
              </div>
            </div>
            
            {/* Event Details */}
            <div className="p-6">
              <h3 className="font-orbitron text-2xl mb-4 text-white">
                {activeEvent.title}
              </h3>
              
              <div className="flex flex-wrap gap-x-6 gap-y-3 mb-6">
                <div className="flex items-center text-titanium-gray">
                  <svg className="w-5 h-5 mr-2 text-deep-sky-blue" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  {activeEvent.date}
                </div>
                
                <div className="flex items-center text-titanium-gray">
                  <svg className="w-5 h-5 mr-2 text-deep-sky-blue" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  {activeEvent.location}
                </div>
              </div>
              
              <div className="mb-6">
                <h4 className="text-sm uppercase font-orbitron text-titanium-gray mb-2">Description</h4>
                <p className="text-white/90">{activeEvent.description}</p>
              </div>
              
              {/* Tags */}
              <div className="mb-6">
                <h4 className="text-sm uppercase font-orbitron text-titanium-gray mb-2">Categories</h4>
                <div className="flex flex-wrap gap-2">
                  {activeEvent.tags.map((tag) => (
                    <span 
                      key={tag} 
                      className="text-xs px-3 py-1.5 bg-titanium-gray/10 text-titanium-gray rounded-full"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
              
              {/* Action Buttons */}
              {activeEvent.category === 'upcoming' && (
                <div className="flex flex-wrap gap-3">
                  <button className="button-primary">
                    Register Now
                  </button>
                  <button className="button-secondary">
                    Add to Calendar
                  </button>
                </div>
              )}
            </div>
          </motion.div>
        </motion.div>
      )}
    </div>
  );
};

export default Events;
